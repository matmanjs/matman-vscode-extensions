{
  "Matman Init Puppeteer": {
    "prefix": ["matman-tpl"],
    "body": [
      "const matman = require(\"matman\");",
      "const { BrowserRunner } = require(\"matman-runner-puppeteer\");",
      "",
      "module.exports = async (opts) => {",
      "  const page = matman.launch(new BrowserRunner(), opts);",
      "",
      "  await page.setDeviceConfig({",
      "    userAgent:",
      "      \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.75 Safari/537.36 mycustomua\",",
      "    viewport: {",
      "      width: 1250,",
      "      height: 400,",
      "    },",
      "  });",
      "  await page.setScreenshotConfig(true);",
      "",
      "  await page.setPageUrl(\"https://www.baidu.com\");",
      "",
      "  await page.addAction(\"SCAN_PAGE\", async (page) => {",
      "    await page.waitFor(\"#su\");",
      "  });",
      "",
      "  const res = await page.evaluate(() => {",
      "    return {",
      "      title: document.title,",
      "      width: window.innerWidth,",
      "      height: window.innerHeight,",
      "      userAgent: navigator.userAgent,",
      "      _version: Date.now(),",
      "      searchBtnTxt: document.querySelector(\"#su\").value,",
      "    };",
      "  });",
      "",
      "  return res;",
      "};",
      "",
      "// module",
      "//   .exports({ show: true })",
      "//   .then(function (result) {",
      "//     console.log(JSON.stringify(result));",
      "//   })",
      "//   .catch(function (error) {",
      "//     console.error(\"failed:\", error);",
      "//   });",
      ""
    ],
    "description": "非推荐目录结构生成完整测试"
  },
  "Matman Init Helper": {
    "prefix": ["matman-init-helper"],
    "body": [
      "const _ = require('lodash');",
      "const matman = require('matman');",
      "const { BrowserRunner } = require('matman-runner-puppeteer');",
      "",
      "/**",
      " * 创建端对端测试的 page driver",
      " *",
      " * @param {String} caseModuleFilePath caseModule的根目录，必须要绝对路径",
      " * @param {Object} pageDriverOpts 额外参数",
      " * @param {Object} [queryDataMap] 额外参数",
      " */",
      "async function createPageDriver(",
      "  caseModuleFilePath,",
      "  pageDriverOpts,",
      "  queryDataMap",
      ") {",
      "  // 创建 PageDriver，API 详见 https://matmanjs.github.io/matman/api/",
      "  const pageDriver = await matman.launch(",
      "    new BrowserRunner(),",
      "    _.merge({}, pageDriverOpts, { caseModuleFilePath })",
      "  );",
      "",
      "  // 走指定的代理服务，由代理服务配置请求加载本地项目，从而达到同源测试的目的",
      "  await pageDriver.useProxyServer(await matman.getLocalWhistleServer(8899));",
      "",
      "  // 使用 mockstar 来做 mock server 用于构造假数据",
      "  if (queryDataMap || pageDriverOpts.queryDataMap) {",
      "    pageDriver.useMockstar(",
      "      _.merge({}, queryDataMap, pageDriverOpts.queryDataMap)",
      "    );",
      "  }",
      "",
      "  // 设置浏览器设备型号",
      "  await pageDriver.setDeviceConfig('iPhone 6');",
      "",
      "  // 设置截屏",
      "  await pageDriver.setScreenshotConfig(true);",
      "",
      "  return pageDriver;",
      "}",
      "",
      "module.exports = {",
      "  createPageDriver,",
      "};",
      ""
    ],
    "description": "初始化 matman helper"
  },
  "Matman Puppeteer With Helper": {
    "prefix": "matman-puppeteer-with-helper",
    "body": [
      "const path = require('path');",
      "const { createPageDriver } = require('../../helpers');",
      "const { BASIC_QUERY_DATA_MAP, WAIT, PAGE_URL } = require('./env');",
      "",
      "module.exports = async (pageDriverOpts) => {",
      "  // 创建 PageDriver",
      "  const pageDriver = await createPageDriver(",
      "    __filename,",
      "    pageDriverOpts,",
      "    BASIC_QUERY_DATA_MAP",
      "  );",
      "",
      "  // 设置页面地址",
      "  await pageDriver.setPageUrl(PAGE_URL);",
      "",
      "  // 第一步：开始操作之前，等待页面加载完成",
      "  await pageDriver.addAction('init', async (page) => {",
      "    await page.waitFor(WAIT.READY);",
      "  });",
      "",
      "  // 获取结果",
      "  return await pageDriver.evaluate(",
      "    path.join(__dirname, './crawlers/get-page-info.js')",
      "  );",
      "};",
      "",
      "// module",
      "//   .exports({",
      "//     show: true,",
      "//     doNotCloseBrowser: true,",
      "//     useRecorder: true,",
      "//   })",
      "//   .then(function (result) {",
      "//     console.log(JSON.stringify(result));",
      "//   })",
      "//   .catch(function (error) {",
      "//     console.error('failed:', error);",
      "//   });",
      ""
    ],
    "description": "使用 helper 文件之后的执行器"
  },
  "Matman Add Action": {
    "prefix": ["matman-action"],
    "body": [
      "await page.addAction(\"${1:ActionName}\", async (page) => {",
      "  await page.waitFor(\"#su\");",
      "});"
    ],
    "description": "Matman Add Action"
  },
  "Matman Debug": {
    "prefix": ["matman-debug"],
    "body": [
      "module",
      "  .exports({ show: true, doNotCloseBrowser: true, useRecorder: false })",
      "  .then(function (result) {",
      "    console.log(JSON.stringify(result));",
      "  })",
      "  .catch(function (error) {",
      "    console.error(\"failed:\", error);",
      "  });",
      ""
    ],
    "description": "Matman Debug"
  }
}
