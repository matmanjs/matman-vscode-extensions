{
  "Matman Case Module V0": {
    "prefix": ["m-matman-case-v0"],
    "body": [
      "const path = require('path');",
      "const matman = require('matman');",
      "const { BrowserRunner } = require('matman-runner-puppeteer');",
      "",
      "module.exports = async (pageDriverOpts) => {",
      "  // 创建 PageDriver 对象，使用它可以实现对浏览器页面的控制",
      "  const pageDriver = await matman.launch(new BrowserRunner(), pageDriverOpts);",
      "",
      "  // 设置浏览器设备型号参数",
      "  await pageDriver.setDeviceConfig({",
      "    userAgent:",
      "      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.75 Safari/537.36 mycustomua',",
      "    viewport: {",
      "      width: 1250,",
      "      height: 400,",
      "    },",
      "  });",
      "",
      "  // 设置截屏",
      "  await pageDriver.setScreenshotConfig(true);",
      "",
      "  // 设置 cookie",
      "  await pageDriver.setCookieConfig('mykey1=myvalue1; mykey2=puppeteer_async');",
      "",
      "  // 设置页面地址",
      "  await pageDriver.setPageUrl('https://www.baidu.com');",
      "",
      "  // 第一步：开始操作之前，等待页面加载完成",
      "  await pageDriver.addAction('init', async (page) => {",
      "    await page.waitFor('#su');",
      "  });",
      "",
      "  // 第二步：搜索输入框输入: matman",
      "  await pageDriver.addAction('input_key_word', async (page) => {",
      "    await page.type('#kw', 'matman');",
      "  });",
      "",
      "  // 第三步：点击搜索按钮，获得搜索结果",
      "  await pageDriver.addAction('click_to_search', async (page) => {",
      "    await page.click('#su');",
      "    await page.waitFor('#content_left');",
      "  });",
      "",
      "  // 执行并获取结果",
      "  // return pageDriver.evaluate(path.join(__dirname, './crawlers/get-page-info.js'));",
      "  return pageDriver.evaluate(() => {",
      "    return {",
      "      title: document.title,",
      "      width: window.innerWidth,",
      "      height: window.innerHeight,",
      "      userAgent: navigator.userAgent,",
      "      searchBtnTxt: document.querySelector('#su').value,",
      "    };",
      "  });",
      "};",
      "",
      "// 调试专用：取消注释，执行 node xxx.js 即可",
      "// module",
      "//   .exports({",
      "//     show: true,",
      "//     doNotCloseBrowser: false,",
      "//     useRecorder: true,",
      "//   })",
      "//   .then(function (result) {",
      "//     console.log(JSON.stringify(result));",
      "//   })",
      "//   .catch(function (error) {",
      "//     console.error('failed:', error);",
      "//   });",
      ""
    ],
    "description": "matman case modules 模板 v0，单文件形式"
  },
  "Matman Case Module V1": {
    "prefix": ["m-matman-case-v1"],
    "body": [
      "const path = require('path');",
      "const { createPageDriver } = require('../../helpers');",
      "",
      "module.exports = async (pageDriverOpts) => {",
      "  // 创建 PageDriver 对象，使用它可以实现对浏览器页面的控制",
      "  const pageDriver = await createPageDriver(__filename, pageDriverOpts);",
      "",
      "  // 设置页面地址",
      "  await pageDriver.setPageUrl('https://www.baidu.com');",
      "",
      "  // 第一步：开始操作之前，等待页面加载完成",
      "  await pageDriver.addAction('init', async (page) => {",
      "    await page.waitFor('#su');",
      "  });",
      "",
      "  // 第二步：搜索输入框输入: matman",
      "  await pageDriver.addAction('input_key_word', async (page) => {",
      "    await page.type('#kw', 'matman');",
      "  });",
      "",
      "  // 第三步：点击搜索按钮，获得搜索结果",
      "  await pageDriver.addAction('click_to_search', async (page) => {",
      "    await page.click('#su');",
      "    await page.waitFor('#content_left');",
      "  });",
      "",
      "  // 执行并获取结果",
      "  return pageDriver.evaluate(path.join(__dirname, './crawlers/get-page-info.js'));",
      "};",
      "",
      "// 调试专用：取消注释，执行 node xxx.js 即可",
      "// module",
      "//   .exports({",
      "//     show: true,",
      "//     doNotCloseBrowser: false,",
      "//     useRecorder: true,",
      "//   })",
      "//   .then(function (result) {",
      "//     console.log(JSON.stringify(result));",
      "//   })",
      "//   .catch(function (error) {",
      "//     console.error('failed:', error);",
      "//   });",
      ""
    ],
    "description": "matman case modules 模板 v1，使用 helpers 工厂模式创建 PageDriver"
  },
  "Matman Case Module V2": {
    "prefix": "m-matman-case-v2",
    "body": [
      "const path = require('path');",
      "const { createPageDriver } = require('../../helpers');",
      "const { BASIC_QUERY_DATA_MAP, WAIT, PAGE_URL } = require('./env');",
      "",
      "module.exports = async (pageDriverOpts) => {",
      "  // 创建 PageDriver 对象，使用它可以实现对浏览器页面的控制",
      "  const pageDriver = await createPageDriver(__filename, pageDriverOpts, BASIC_QUERY_DATA_MAP);",
      "",
      "  // 设置页面地址",
      "  await pageDriver.setPageUrl(PAGE_URL);",
      "",
      "  // 第一步：开始操作之前，等待页面加载完成",
      "  await pageDriver.addAction('init', async (page) => {",
      "    await page.waitFor(WAIT.READY);",
      "  });",
      "",
      "  // 第二步：搜索输入框输入: matman",
      "  await pageDriver.addAction('input_key_word', async (page) => {",
      "    await page.type('#kw', 'matman');",
      "  });",
      "",
      "  // 第三步：点击搜索按钮，获得搜索结果",
      "  await pageDriver.addAction('click_to_search', async (page) => {",
      "    await page.click('#su');",
      "    await page.waitFor('#content_left');",
      "  });",
      "",
      "  // 执行并获取结果",
      "  return pageDriver.evaluate(path.join(__dirname, './crawlers/get-page-info.js'));",
      "};",
      "",
      "// 调试专用：取消注释，执行 node xxx.js 即可",
      "// module",
      "//   .exports({",
      "//     show: true,",
      "//     doNotCloseBrowser: false,",
      "//     useRecorder: true,",
      "//   })",
      "//   .then(function (result) {",
      "//     console.log(JSON.stringify(result));",
      "//   })",
      "//   .catch(function (error) {",
      "//     console.error('failed:', error);",
      "//   });",
      ""
    ],
    "description": "matman case modules 模板 v2，使用 helpers 工厂模式创建 PageDriver，使用 env 定义常量"
  },
  "Matman Helper Init": {
    "prefix": ["m-matman-helper-init"],
    "body": [
      "const _ = require('lodash');",
      "const matman = require('matman');",
      "const { BrowserRunner } = require('matman-runner-puppeteer');",
      "",
      "/**",
      " * 设置浏览器打开时所模拟的设备参数",
      " *",
      " * 内置的设备：https://github.com/puppeteer/puppeteer/blob/main/src/common/DeviceDescriptors.ts",
      " * 更多实践请查阅：https://github.com/matmanjs/test-automation-training/tree/master/matman/04.device-emulation",
      " */",
      "const DEVICE = {",
      "  // 内置的设备（iOS）：iPhone 6",
      "  IOS_IPHONE_6: 'iPhone 6',",
      "",
      "  // 内置的设备（安卓）：Galaxy Note 3",
      "  ANDROID_GALAXY_NOTE_3: 'Galaxy Note 3',",
      "",
      "  // 自定义设备",
      "  CUSTOM_DEVICE: {",
      "    name: 'My iPhone 6',",
      "    userAgent:",
      "      'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1',",
      "    viewport: {",
      "      width: 375,",
      "      height: 667,",
      "      deviceScaleFactor: 2,",
      "      isMobile: true,",
      "      hasTouch: true,",
      "      isLandscape: false,",
      "    },",
      "  },",
      "};",
      "",
      "/**",
      " * 创建端对端测试的 page driver",
      " *",
      " * @param {String} caseModuleFilePath caseModule的根目录，必须要绝对路径",
      " * @param {Object} pageDriverOpts PageDriver 额外参数",
      " * @param {Object} [queryDataMap] mock server 额外参数",
      " */",
      "async function createPageDriver(",
      "  caseModuleFilePath,",
      "  pageDriverOpts,",
      "  queryDataMap,",
      ") {",
      "  // 创建 PageDriver，API 详见 https://matmanjs.github.io/matman/api/",
      "  const pageDriver = await matman.launch(",
      "    new BrowserRunner(),",
      "    _.merge({}, pageDriverOpts, { caseModuleFilePath }),",
      "  );",
      "",
      "  // 走指定的代理服务，由代理服务配置请求加载本地项目，从而达到同源测试的目的",
      "  await pageDriver.useProxyServer(await matman.getLocalWhistleServer(8899));",
      "",
      "  // 使用 mockstar 来做 mock server 用于构造假数据",
      "  if (queryDataMap || pageDriverOpts.queryDataMap) {",
      "    await pageDriver.useMockstar(_.merge({}, queryDataMap, pageDriverOpts.queryDataMap));",
      "  }",
      "",
      "  // 设置浏览器设备型号",
      "  await pageDriver.setDeviceConfig(DEVICE.IOS_IPHONE_6);",
      "",
      "  // 设置截屏",
      "  await pageDriver.setScreenshotConfig(true);",
      "",
      "  // 返回",
      "  return pageDriver;",
      "}",
      "",
      "module.exports = {",
      "  createPageDriver,",
      "  DEVICE,",
      "};",
      ""
    ],
    "description": "matman helper 模板"
  },
  "Matman Case Module Add Action": {
    "prefix": ["m-matman-case-action"],
    "body": [
      "// TODO：注释一下这个步骤的目的是什么",
      "await page.addAction(\"${1:ActionName}\", async (page) => {",
      "  await page.waitFor(\"#su\");",
      "});"
    ],
    "description": "matman case module 增加 addAction"
  },
  "Matman Case Module Add Debug": {
    "prefix": ["m-matman-case-debug"],
    "body": [
      "// 调试专用：取消注释，执行 node xxx.js 即可",
      "// module",
      "//   .exports({",
      "//     show: true,",
      "//     doNotCloseBrowser: false,",
      "//     useRecorder: true,",
      "//   })",
      "//   .then(function (result) {",
      "//     console.log(JSON.stringify(result));",
      "//   })",
      "//   .catch(function (error) {",
      "//     console.error('failed:', error);",
      "//   });"
    ],
    "description": "matman case module 增加 debug 代码"
  },
  "Matman Crawler Init": {
    "prefix": ["m-matman-crawler-init"],
    "body": [
      "const { useJquery } = require('web-crawl-util');",
      "",
      "/**",
      " * 获得 webview 的信息",
      " */",
      "function getWebviewInfo() {",
      "  return {",
      "    title: document.title,",
      "    width: window.innerWidth,",
      "    height: window.innerHeight,",
      "    userAgent: navigator.userAgent,",
      "  };",
      "}",
      "",
      "/**",
      " * 获得搜索请求的相关信息",
      " */",
      "function getSearchReq() {",
      "  return {",
      "    searchBtnTxt: useJquery.getVal('#stb'),",
      "    searchKeyWorld: useJquery.getVal('#query'),",
      "  };",
      "}",
      "",
      "/**",
      " * 获得搜索结果的相关信息",
      " */",
      "function getSearchRsp() {",
      "  const searchResult = [];",
      "",
      "  $('.pt,.vrTitle', '#main .results').each(function () {",
      "    searchResult.push({",
      "      title: useJquery.getText($(this)),",
      "    });",
      "  });",
      "",
      "  return {",
      "    searchBtnTxt: useJquery.getVal('#searchBtn'),",
      "    searchKeyWorld: useJquery.getVal('#upquery'),",
      "    searchNumTips: useJquery.getText('#main .search-info .num-tips'),",
      "    searchResult,",
      "  };",
      "}",
      "",
      "module.exports = () => {",
      "  return {",
      "    webviewInfo: getWebviewInfo(),",
      "    searchReq: getSearchReq(),",
      "    searchRsp: getSearchRsp(),",
      "  };",
      "};",
      ""
    ],
    "description": "matman crawler 爬虫脚本模板"
  },
  "Matman Config File Init": {
    "prefix": ["m-matman-config-init"],
    "body": [
      "// const path = require('path');",
      "",
      "// 更多配置说明，请参考 https://matmanjs.github.io/matman/api/matman-config.html",
      "module.exports = {",
      "  // matman-app 项目根目录",
      "  rootPath: __dirname,",
      "",
      "  // 是否自动注入 JQuery",
      "  crawlerInjectJQuery: true,",
      "",
      "  // 测试对象的根目录",
      "  // caseModulesPath: path.resolve(__dirname, './src/case_modules'),",
      "",
      "  // 爬虫脚本构建之后的目录",
      "  // crawlerBuildPath: path.resolve(__dirname, './build/crawler-script'),",
      "",
      "  // 屏幕截图保存的路径",
      "  // screenshotPath: path.resolve(__dirname, './build/screenshot_output'),",
      "",
      "  // 覆盖率文件保存路径",
      "  // coveragePath: path.resolve(__dirname, './build/coverage_output'),",
      "",
      "  // matman 执行结果保存路径",
      "  // matmanResultPath: path.resolve(__dirname, './build/matman_result_output'),",
      "",
      "  // 是否为开发模式",
      "  // isDevBuild: false,",
      "};",
      ""
    ],
    "description": "matman.config.js 模板"
  }
}
